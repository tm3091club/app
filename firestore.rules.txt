rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() { return request.auth != null; }
    function getUserId() { return request.auth.uid; }
    function getUserEmail() { return request.auth.token.email; }

    // Checks if the requesting user is the owner of the club.
    function isClubOwner(ownerId) {
      return isAuthenticated() && getUserId() == ownerId;
    }

    // Checks if the requesting user is an Admin of the club.
    // This includes the owner and users with the 'Admin' role.
    function isClubAdmin(ownerId) {
      if (!isAuthenticated()) {
        return false;
      }
      if (isClubOwner(ownerId)) {
        return true;
      }
      // For a non-owner, check if they are a member with the 'Admin' role.
      // This requires reading the main club document.
      let clubData = get(/databases/$(database)/documents/users/$(ownerId)).data;
      return 'organization' in clubData &&
             'members' in clubData.organization &&
             clubData.organization.members.matchesAny(m, m.uid == getUserId() && m.role == 'Admin');
    }

    // Checks if the requesting user is a member of the specified club.
    function isClubMember(ownerId) {
      if (!isAuthenticated()) {
        return false;
      }
      if (isClubOwner(ownerId)) {
        return true;
      }
      // Check for the existence of the user's pointer document.
      let userPointerPath = /databases/$(database)/documents/users/$(getUserId());
      return exists(userPointerPath) && get(userPointerPath).data.ownerId == ownerId;
    }


    // --- User Profile (Club Data or Pointer Doc) ---
    match /users/{userId} {
      // READ:
      // A user can read their own document (pointer or main club doc).
      // A member can read their club's main document.
      allow get: if isAuthenticated() && (getUserId() == userId || isClubMember(userId));

      // DENY lists on the users collection for security and performance.
      allow list: if false;

      // CREATE: A user can create their own document (for signup).
      allow create: if isAuthenticated() && getUserId() == userId;
      
      // DELETE: Only the club owner can delete the main club document.
      // The logic for deleting pointer docs is handled by the app.
      allow delete: if isClubOwner(userId);

      // UPDATE:
      allow update: if isAuthenticated() && (
        // Case 1: An Admin is updating the main club doc.
        isClubAdmin(userId) ||
        // Case 2: A member is updating their own availability (or schedule, if allowed).
        (isClubMember(userId) && getUserId() == userId && request.resource.data.diff(resource.data).changedKeys().hasAny(['availability', 'schedules'])) ||
        // Case 3: A new user joins via a token-based invitation.
        (
          request.resource.data.lastJoinToken != null &&
          request.resource.data.organization.members[request.resource.data.organization.members.size() - 1].uid == getUserId() &&
          get(/databases/$(database)/documents/invitations/$(request.resource.data.lastJoinToken)).data.status == 'pending' &&
          get(/databases/$(database)/documents/invitations/$(request.resource.data.lastJoinToken)).data.ownerId == userId &&
          get(/databases/$(database)/documents/invitations/$(request.resource.data.lastJoinToken)).data.email.lower() == getUserEmail().lower() &&
          request.resource.data.organization.members.size() == resource.data.organization.members.size() + 1 &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['organization', 'lastJoinToken']) &&
          request.resource.data.organization.diff(resource.data.organization).changedKeys().hasOnly(['members'])
        )
      );
    }

    // --- Invitations Collection (token-based) ---
    match /invitations/{inviteId} {
      // Anyone with the token can fetch the invite details (e.g., to get the email for the join form).
      allow get: if true;

      // Admins can list invites for their club.
      // This rule is designed to be safe because the internal `isClubAdmin` function needs to read
      // the main club doc, which is permitted by the `get` rule on `/users/{userId}` via `isClubMember`.
      allow list: if isAuthenticated() &&
                    request.query.ownerId != null &&
                    request.query.status == 'pending' &&
                    isClubAdmin(request.query.ownerId);

      // The Club Admin can create invites for their own club.
      allow create: if isClubAdmin(request.resource.data.ownerId);

      // An Admin can revoke (update status). An invited user can complete (update status).
      allow update: if isAuthenticated() && (
        isClubAdmin(resource.data.ownerId) ||
        (resource.data.email.lower() == getUserEmail() && request.resource.data.status == 'completed')
      );

      // Deleting invites is a clean way to revoke them.
      allow delete: if isAuthenticated() && isClubAdmin(resource.data.ownerId);
    }

    // --- Public Schedules Collection ---
    match /publicSchedules/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isAuthenticated() && isClubAdmin(resource.data.ownerId);
    }

    // --- Email Trigger Extension Collection ---
    match /mail/{docId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false; // Only the extension can process the queue.
    }
  }
}