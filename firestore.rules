rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() { return request.auth != null; }
    function getUserId() { return request.auth.uid; }

    // Checks if the requesting user is the owner of the club.
    function isClubOwner(ownerId) {
      return isAuthenticated() && getUserId() == ownerId;
    }

    // --- User Profile (Club Data or Pointer Doc) ---
    match /users/{userId} {
      // READ: Allow authenticated users to read their own document or any club document
      allow get: if isAuthenticated();

      // DENY lists on the users collection for security and performance.
      allow list: if false;

      // CREATE: A user can create their own document (for signup).
      allow create: if isAuthenticated() && getUserId() == userId;
      
      // DELETE: Only the club owner can delete the main club document.
      allow delete: if isClubOwner(userId);

      // UPDATE: Allow authenticated users to update (app logic will handle permissions)
      allow update: if isAuthenticated();
    }

    // --- Invitations Collection (token-based) ---
    match /invitations/{inviteId} {
      // Anyone can read invitations (needed for join process)
      allow get: if true;

      // Allow authenticated users to list, create, update, delete invitations
      allow list, create, update, delete: if isAuthenticated();
    }

    // --- Public Schedules Collection ---
    match /publicSchedules/{docId} {
      // Anyone can read public schedules
      allow get, list: if true;
      
      // Allow authenticated users to create/update/delete (will be filtered by app logic)
      allow create, update, delete: if isAuthenticated();
    }

    // --- Email Trigger Extension Collection ---
    match /mail/{docId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false; // Only the extension can process the queue.
    }

    // --- Notifications Collection ---
    match /notifications/{notificationId} {
      // Users can read individual notifications if they own them
      allow get: if isAuthenticated() && resource.data.userId == getUserId();
      
      // Users can list their own notifications
      allow list: if isAuthenticated() && request.auth.uid != null;
      
      // Allow authenticated users to create notifications
      allow create: if isAuthenticated();
      
      // Users can mark their own notifications as read or dismissed
      allow update: if isAuthenticated() && 
        resource.data.userId == getUserId() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readAt', 'isDismissed', 'dismissedAt']);
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && resource.data.userId == getUserId();
    }
  }
}