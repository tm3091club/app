{
  "metadata": {
    "created": "2025-09-27T17:19:53.036248",
    "version": "1.0",
    "description": "Toastmasters AI Agent Knowledge Base",
    "total_episodes": 8
  },
  "episodes": [
    {
      "id": "project_architecture",
      "title": "Project Architecture Overview",
      "content": "\n                    Toastmasters Monthly Scheduler Project Overview:\n                    \n                    This is a React + TypeScript application built with Vite that manages Toastmasters club operations.\n                    The app uses Firebase Firestore for data storage and authentication.\n                    \n                    Key Components:\n                    - React 19.1.0 with TypeScript 5.8.2\n                    - Vite 6.2.0 for build tooling\n                    - Firebase 12.0.0 for backend services\n                    - Tailwind CSS 4.1.11 for styling\n                    - Lucide React for icons\n                    \n                    Main Features:\n                    - Monthly schedule generation and management\n                    - Member management with role assignments\n                    - Weekly agenda creation and editing\n                    - Public sharing of schedules and agendas\n                    - Email notifications and reminders\n                    ",
      "entities": [
        "Toastmasters App",
        "React",
        "TypeScript",
        "Firebase",
        "Vite",
        "Tailwind CSS"
      ],
      "category": "architecture",
      "created": "2025-09-27T17:19:53.036279"
    },
    {
      "id": "user_preferences",
      "title": "User Preferences and Guidelines",
      "content": "\n                    User Preferences and UI/UX Guidelines:\n                    \n                    Based on user interactions and feedback:\n                    \n                    1. Git Workflow Preferences:\n                       - User prefers git commands for deployments and version bumping\n                       - All operations should be tracked in git history\n                    \n                    2. UI/UX Design Preferences:\n                       - Desktop/Web: Action buttons aligned on the right side\n                       - Mobile: Action buttons should be stacked vertically\n                       - Event times displayed as start time rather than time ranges\n                       - No print button needed (export to PDF works perfectly)\n                    \n                    3. Code Delivery Preferences:\n                       - Prefer creating text files in project directory over inline code\n                       - Use structured task lists for complex multi-step tasks\n                    \n                    4. Database and Data Management:\n                       - All data must stay in Firebase Firestore\n                       - Never introduce new databases without explicit permission\n                       - Reference TM App Golden Rules.md as single source of truth\n                    ",
      "entities": [
        "User Preferences",
        "Git Workflow",
        "UI/UX Design",
        "Mobile Responsive",
        "Code Delivery",
        "Database Rules"
      ],
      "category": "preferences",
      "created": "2025-09-27T17:19:53.036281"
    },
    {
      "id": "month_selection_bug_fix",
      "title": "Month Selection Logic Bug Fix",
      "content": "\n                    Recent Bug Fix: Default Month Selection Logic\n                    \n                    Issue: October not showing as default after September 24th\n                    \n                    Solution Implemented:\n                    - Updated getAppropriateScheduleId function in ToastmastersContext.tsx\n                    - Added logic to check if current month has future meetings\n                    - If no future meetings in current month, automatically switch to next month\n                    - Added proper timezone handling with 'T00:00:00' suffix\n                    \n                    Files Modified:\n                    - Context/ToastmastersContext.tsx (lines 203-267)\n                    \n                    Testing Notes:\n                    - Verified that October schedule now appears as default after September 24th passes\n                    - Confirmed proper handling of year transitions (December to January)\n                    - Tested edge cases with invalid dates and missing schedules\n                    \n                    Code Pattern Used:\n                    - useCallback for performance optimization\n                    - Proper error handling and loading states\n                    - React best practices for state management\n                    ",
      "entities": [
        "Bug Fix",
        "Month Selection Logic",
        "getAppropriateScheduleId",
        "Date Handling",
        "Code Patterns"
      ],
      "category": "bug_fix",
      "created": "2025-09-27T17:19:53.036283"
    },
    {
      "id": "business_logic",
      "title": "Toastmasters Business Logic",
      "content": "\n                    Business Logic and Domain Knowledge:\n                    \n                    Toastmasters Club Operations:\n                    \n                    1. Meeting Structure:\n                       - Weekly meetings with specific roles (Toastmaster, Speakers, Table Topics Master, etc.)\n                       - Monthly schedules with 4-5 meetings per month\n                       - Role assignments with automatic rotation and preferences\n                    \n                    2. Member Management:\n                       - Member statuses: active, inactive, guest\n                       - Role qualifications: Toastmaster, Table Topics Master, General Evaluator, Past President\n                       - Availability tracking for meeting participation\n                    \n                    3. Schedule Generation:\n                       - Automatic role assignment based on member preferences and availability\n                       - Conflict resolution for overlapping assignments\n                       - Theme assignment for meetings\n                    \n                    4. Agenda Management:\n                       - Template-based agenda creation\n                       - Role-bound items that auto-update with member assignments\n                       - Export capabilities (PDF, TSV for spreadsheets)\n                       - Public sharing functionality\n                    \n                    5. Permissions Model:\n                       - Admins have full access to all features\n                       - Toastmasters can edit agendas for their assigned weeks\n                       - Members can view schedules and agendas\n                    ",
      "entities": [
        "Toastmasters Business Logic",
        "Meeting Structure",
        "Member Management",
        "Schedule Generation",
        "Permissions Model"
      ],
      "category": "business_logic",
      "created": "2025-09-27T17:19:53.036284"
    },
    {
      "id": "technical_implementation",
      "title": "Technical Implementation Details",
      "content": "\n                    Technical Implementation Details:\n                    \n                    Key Functions and Their Purpose:\n                    \n                    1. getAppropriateScheduleId(): Determines which monthly schedule to display by default\n                    2. getDefaultWeek(): Automatically selects the appropriate week to show in weekly agenda\n                    3. loadOrCreateAgenda(): Creates or loads agenda for a specific week\n                    4. saveWeeklyAgenda(): Persists agenda changes to Firebase\n                    5. handleShare(): Creates public shareable links for agendas\n                    \n                    Data Models:\n                    - MonthlySchedule: Contains meetings array with role assignments\n                    - WeeklyAgenda: Contains agenda items, theme, and meeting info\n                    - Member: Contains member details, status, and qualifications\n                    - Organization: Contains club info, members array, and settings\n                    \n                    Firebase Collections:\n                    - users: User documents with schedules, members, and organization data\n                    - publicAgendas: Shared agenda documents accessible via public URLs\n                    - publicSchedules: Shared schedule documents accessible via public URLs\n                    \n                    Security Rules:\n                    - Users can only access their own organization's data\n                    - Public documents are readable by anyone with the URL\n                    - Admin operations require proper authentication and role verification\n                    \n                    Mentorship System Technical Details:\n                    \n                    Service Layer Architecture:\n                    - mentorshipService.ts: Centralized service for all mentorship operations\n                    - pairId(mentorId, menteeId): Generates unique pair identifiers using underscore separator\n                    - upsertPair(): Creates or updates mentorship pairs with server timestamps\n                    - getAllPairs(): Fetches all mentorship pairs for an organization\n                    - notesRef(): Returns Firestore reference to notes subcollection\n                    - addNote(): Creates new notes with proper typing and validation\n                    - watchNotes(): Real-time listener for note updates using onSnapshot\n                    \n                    Firestore Data Structure:\n                    - organizations/{orgId}/mentorshipPairs/{pairId}\n                      - id: string (mentorId_menteeId format)\n                      - mentorId: string (Member.id reference)\n                      - menteeId: string (Member.id reference)\n                      - createdAt: serverTimestamp\n                      - active: boolean\n                    - organizations/{orgId}/mentorshipPairs/{pairId}/notes/{noteId}\n                      - id: string (auto-generated)\n                      - createdAt: serverTimestamp\n                      - createdByUid: string (user who created note)\n                      - visibility: MentorshipNoteVisibility enum\n                      - type: MentorshipNoteType enum\n                      - text: string (note content)\n                      - goals: string[] (optional goal tracking)\n                      - status: 'open' | 'in_progress' | 'done' (optional)\n                      - meetingDate: string (optional ISO date)\n                      - linkedRole: string (optional role reference)\n                    \n                    TypeScript Interfaces:\n                    - MentorshipPair: Core relationship data structure\n                    - MentorshipNote: Rich note structure with metadata\n                    - MentorshipNoteVisibility: 'mentor' | 'mentee' | 'both' | 'officers'\n                    - MentorshipNoteType: 'session' | 'goal' | 'feedback' | 'milestone' | 'general'\n                    - OfficerRole: Toastmasters officer positions enum\n                    \n                    React Component Architecture:\n                    - MentorshipManager: Admin-only pair management with CRUD operations\n                    - MentorshipNotes: Modal/drawer with real-time note display and creation\n                    - MentorshipPanel: Member profile integration with quick access\n                    - RoleAssignmentCell: Schedule integration with mentorship icons\n                    \n                    State Management Patterns:\n                    - useState for local component state (forms, modals, loading)\n                    - useCallback for performance optimization (event handlers)\n                    - useEffect for side effects (Firestore listeners, cleanup)\n                    - ToastmastersContext for global organization state\n                    \n                    Permission System Integration:\n                    - isAdmin() function for admin-only features\n                    - isAuthenticated() for basic access control\n                    - Role-based visibility for notes (mentor/mentee/officers)\n                    - Firestore security rules for data access control\n                    \n                    Real-time Data Patterns:\n                    - Firestore onSnapshot for live updates\n                    - Proper cleanup with useEffect return functions\n                    - Error handling for connection issues\n                    - Optimistic updates for better UX\n                    \n                    UI/UX Technical Implementation:\n                    - Tailwind CSS for consistent styling\n                    - Mobile-responsive design with sm: breakpoints\n                    - Dark mode support with dark: classes\n                    - Accessibility features (ARIA labels, keyboard navigation)\n                    - Loading states and error boundaries\n                    \n                    Performance Optimizations:\n                    - useCallback for event handlers to prevent re-renders\n                    - Memoized calculations with useMemo\n                    - Efficient Firestore queries with proper indexing\n                    - Lazy loading for modal components\n                    \n                    Error Handling Patterns:\n                    - Try-catch blocks for async operations\n                    - User-friendly error messages\n                    - Graceful degradation for network issues\n                    - Validation for form inputs\n                    \n                    Integration Points:\n                    - ProfilePage: Mentorship panels in member profiles\n                    - MemberManager: Mentorship column in member tables\n                    - ScheduleView: Mentorship icons in role assignments\n                    - Firestore rules: Security for mentorship data access\n                    ",
      "entities": [
        "Technical Implementation",
        "Key Functions",
        "Data Models",
        "Firebase Collections",
        "Security Rules",
        "Mentorship System",
        "Service Layer Architecture",
        "Firestore Data Structure",
        "TypeScript Interfaces",
        "React Component Architecture",
        "State Management Patterns",
        "Permission System Integration",
        "Real-time Data Patterns",
        "UI/UX Technical Implementation",
        "Performance Optimizations",
        "Error Handling Patterns",
        "Integration Points"
      ],
      "category": "technical",
      "created": "2025-09-27T17:19:53.036285"
    },
    {
      "id": "file_structure",
      "title": "Project File Structure and Organization",
      "content": "\n                    Project File Structure and Organization:\n                    \n                    The app follows a component-based architecture with the following structure:\n                    \n                    Root Level:\n                    - App.tsx: Main application component with routing logic\n                    - types.ts: TypeScript type definitions\n                    - Constants.ts: Application constants and configuration\n                    \n                    components/: React components organized by feature\n                    - Header.tsx: Navigation and user interface\n                    - ScheduleView.tsx: Monthly schedule management\n                    - MemberManager.tsx: Member CRUD operations\n                    - WeeklyAgenda.tsx: Agenda creation and editing\n                    - ProfilePage.tsx: User profile management\n                    - common/: Shared components (ErrorBoundary, ShareModal)\n                    - schedule/: Schedule-specific components\n                    \n                    Context/: React context providers\n                    - AuthContext.tsx: Authentication state management\n                    - ToastmastersContext.tsx: Main app state and data operations\n                    - NotificationContext.tsx: Notification management\n                    \n                    services/: Business logic and API services\n                    - firebase.ts: Firebase configuration and setup\n                    - Various service files for different functionalities\n                    \n                    utils/: Utility functions and helpers\n                    - monthUtils.ts: Date and month manipulation utilities\n                    - version.ts: Version management utilities\n                    - adminTransitionUtils.ts: Admin transition system utilities\n                    \n                    Data Flow:\n                    Firebase Firestore → ToastmastersContext → React Components\n                    ",
      "entities": [
        "Project Architecture",
        "React Components",
        "Context Providers",
        "Firebase Firestore",
        "Data Flow",
        "File Structure"
      ],
      "category": "architecture",
      "created": "2025-09-27T17:19:53.036286"
    },
    {
      "id": "mentorship_system_implementation",
      "title": "Mentorship System Implementation",
      "content": "\n                    Mentorship System Implementation (December 2024):\n                    \n                    A comprehensive mentorship system was added to the Toastmasters app to facilitate mentor-mentee relationships and progress tracking.\n                    \n                    Data Model (Firestore):\n                    - Collections: organizations/{orgId}/mentorshipPairs/{pairId} and organizations/{orgId}/mentorshipPairs/{pairId}/notes/{noteId}\n                    - Pair ID format: ${mentorMemberId}_${menteeMemberId}\n                    - Security rules: Added proper permissions for mentorship data access\n                    \n                    TypeScript Types Added:\n                    - MentorshipPair interface for mentor-mentee relationships\n                    - MentorshipNote interface with visibility controls and note types\n                    - MentorshipNoteVisibility enum: 'mentor', 'mentee', 'both', 'officers'\n                    - MentorshipNoteType enum: 'session', 'goal', 'feedback', 'milestone', 'general'\n                    - Restored OfficerRole enum and added to AppUser interface\n                    \n                    Service Layer:\n                    - mentorshipService.ts with complete CRUD operations\n                    - Functions: pairId(), upsertPair(), getAllPairs(), notesRef(), addNote(), watchNotes()\n                    - Real-time note watching with Firestore listeners\n                    \n                    UI Components Created:\n                    \n                    1. MentorshipManager (Admin-only):\n                       - Create mentor-mentee pairs\n                       - Toggle active/inactive pairs\n                       - View all active pairs with member names\n                       - Summary statistics\n                    \n                    2. MentorshipNotes (Modal/Drawer):\n                       - Rich note creation with types and visibility controls\n                       - Goal tracking with status management\n                       - Meeting date and role linking\n                       - Real-time note display with proper filtering\n                    \n                    3. MentorshipPanel (Member Profile Integration):\n                       - Shows mentorship relationships for individual members\n                       - Quick access to notes via modal\n                       - Displays mentor/mentee status\n                    \n                    Integration Points:\n                    \n                    ProfilePage:\n                    - Mentorship panel in \"My Profile\" section\n                    - Admin mentorship management section\n                    - Officer role functionality restored\n                    \n                    MemberManager:\n                    - New \"Mentorship\" column in both desktop and mobile views\n                    - Shows mentorship status for each member\n                    - Quick access to mentorship notes\n                    \n                    ScheduleView:\n                    - Mentorship icons (📝) next to mentee names in role assignments\n                    - Only visible to admins and mentors\n                    - Helps identify mentees during role assignment\n                    \n                    Key Features:\n                    - Permission-based visibility: Notes filtered by user roles and relationships\n                    - Real-time updates: Notes sync instantly across all views\n                    - Mobile-responsive: Works seamlessly on both desktop and mobile\n                    - Admin controls: Full mentorship pair management for administrators\n                    - Goal tracking: Special note type for tracking mentee goals with status\n                    - Meeting integration: Link notes to specific meetings and roles\n                    \n                    Files Created/Modified:\n                    - types.ts: Added mentorship interfaces and restored OfficerRole\n                    - services/mentorshipService.ts: New service for mentorship operations\n                    - components/mentorship/MentorshipManager.tsx: Admin management component\n                    - components/mentorship/MentorshipNotes.tsx: Note-taking modal/drawer\n                    - components/mentorship/MentorshipPanel.tsx: Member profile integration\n                    - components/ProfilePage.tsx: Integrated mentorship panels and restored officer roles\n                    - components/MemberManager.tsx: Added mentorship column\n                    - components/schedule/RoleAssignmentCell.tsx: Added mentorship icons\n                    - firestore.rules: Added mentorship security rules\n                    \n                    Implementation Process:\n                    \n                    1. Initial Error Handling:\n                       - Encountered linting errors with missing OfficerRole enum\n                       - Fixed by adding OfficerRole enum to types.ts and AppUser interface\n                       - Resolved PendingInvite.memberId issue by adding optional memberId field\n                    \n                    2. Code Integration Patterns:\n                       - Used existing modal/drawer patterns from ShareModal for MentorshipNotes\n                       - Followed ProfilePage component structure for MentorshipManager\n                       - Applied consistent Tailwind CSS classes and responsive design\n                       - Maintained existing error handling and loading state patterns\n                    \n                    3. Permission System Integration:\n                       - Leveraged existing isAdmin() and isAuthenticated() functions\n                       - Added mentorship-specific permission checks in Firestore rules\n                       - Implemented role-based visibility for notes (mentor/mentee/officers)\n                       - Used existing user context for permission validation\n                    \n                    4. Real-time Data Patterns:\n                       - Used Firestore onSnapshot for real-time note updates\n                       - Implemented proper cleanup with useEffect return functions\n                       - Applied existing error handling patterns for Firestore operations\n                       - Used FieldValue.serverTimestamp() for consistent timestamps\n                    \n                    5. UI/UX Consistency:\n                       - Maintained existing button styles and hover effects\n                       - Used consistent form validation patterns\n                       - Applied existing mobile-responsive breakpoints\n                       - Followed established color schemes and dark mode support\n                    \n                    6. State Management:\n                       - Used React useState for local component state\n                       - Leveraged existing ToastmastersContext for organization data\n                       - Implemented proper loading and error states\n                       - Used useCallback for performance optimization\n                    \n                    The system follows existing app patterns and integrates seamlessly with current user management, permissions, and UI design.\n                    ",
      "entities": [
        "Mentorship System",
        "Firestore Collections",
        "TypeScript Interfaces",
        "React Components",
        "UI Integration",
        "Permission System",
        "Real-time Updates",
        "Mobile Responsive",
        "Error Handling",
        "Code Patterns",
        "State Management",
        "Security Rules"
      ],
      "category": "feature_implementation",
      "created": "2025-01-27T12:00:00.000000"
    },
    {
      "id": "detailed_technical_implementation",
      "title": "Detailed Technical Implementation Guide",
      "content": "\n                    DETAILED TECHNICAL IMPLEMENTATION GUIDE:\n                    \n                    CORE APPLICATION ARCHITECTURE:\n                    \n                    React + TypeScript + Vite Stack:\n                    - React 19.1.0 with TypeScript 5.8.2 for type safety\n                    - Vite 6.2.0 for fast development and optimized builds\n                    - Tailwind CSS 4.1.11 for utility-first styling\n                    - Firebase 12.0.0 for backend services (Firestore, Auth, Functions)\n                    - Lucide React for consistent iconography\n                    \n                    Key Functions and Their Purpose:\n                    \n                    1. getAppropriateScheduleId(): Determines which monthly schedule to display by default\n                       - Logic: Check if current month has future meetings\n                       - Fallback: Switch to next month if no future meetings\n                       - Timezone handling: Uses 'T00:00:00' suffix for proper date comparison\n                       - Edge cases: Year transitions (December to January)\n                       - Implementation: Uses useCallback for performance optimization\n                       - Error handling: Graceful fallback to current month on errors\n                    \n                    2. getDefaultWeek(): Automatically selects the appropriate week to show in weekly agenda\n                       - Calculates current week number within the month\n                       - Handles month boundaries and leap years\n                       - Returns week index for agenda display\n                       - Uses moment.js for date calculations\n                       - Caches results to prevent recalculation\n                    \n                    3. loadOrCreateAgenda(): Creates or loads agenda for a specific week\n                       - Checks for existing agenda in Firestore\n                       - Creates new agenda with default template if none exists\n                       - Applies role-bound items based on member assignments\n                       - Returns agenda object with all necessary data\n                       - Handles concurrent editing conflicts\n                       - Uses optimistic updates for better UX\n                    \n                    4. saveWeeklyAgenda(): Persists agenda changes to Firebase\n                       - Validates agenda data before saving\n                       - Updates Firestore with optimistic updates\n                       - Handles concurrent editing conflicts\n                       - Triggers notifications for role changes\n                       - Uses batch writes for atomic operations\n                       - Implements retry logic for network failures\n                    \n                    5. handleShare(): Creates public shareable links for agendas\n                       - Generates unique share IDs using crypto.randomUUID()\n                       - Creates public document in Firestore\n                       - Sets appropriate expiration dates (30 days default)\n                       - Returns shareable URL for external access\n                       - Implements access tracking and analytics\n                       - Handles URL generation and validation\n                    \n                    Data Models and TypeScript Interfaces:\n                    \n                    MonthlySchedule Interface:\n                    - id: string (unique schedule identifier)\n                    - month: number (1-12)\n                    - year: number (full year)\n                    - meetings: Meeting[] (array of weekly meetings)\n                    - createdAt: Timestamp\n                    - updatedAt: Timestamp\n                    - theme: string (monthly theme)\n                    - notes: string (schedule notes)\n                    \n                    Meeting Interface:\n                    - date: string (ISO date string)\n                    - theme: string (meeting theme)\n                    - roles: Record<string, string> (role assignments)\n                    - notes: string (additional meeting notes)\n                    - isCancelled: boolean (cancellation status)\n                    - specialInstructions: string (special meeting instructions)\n                    \n                    WeeklyAgenda Interface:\n                    - id: string (unique agenda identifier)\n                    - scheduleId: string (reference to monthly schedule)\n                    - week: number (week number in month)\n                    - items: AgendaItem[] (agenda items array)\n                    - theme: string (meeting theme)\n                    - createdAt: Timestamp\n                    - updatedAt: Timestamp\n                    - isPublished: boolean (publication status)\n                    - shareId?: string (public share identifier)\n                    \n                    AgendaItem Interface:\n                    - id: string (unique item identifier)\n                    - type: 'role' | 'announcement' | 'custom'\n                    - title: string (item title)\n                    - description: string (item description)\n                    - role: string (associated role, if applicable)\n                    - order: number (display order)\n                    - isRoleBound: boolean (auto-updates with role assignments)\n                    - duration: number (estimated duration in minutes)\n                    - isRequired: boolean (required vs optional item)\n                    \n                    Member Interface:\n                    - id: string (unique member identifier)\n                    - uid: string (Firebase Auth UID)\n                    - name: string (display name)\n                    - email: string (email address)\n                    - role: UserRole (Admin | Member)\n                    - status: 'active' | 'inactive' | 'guest'\n                    - qualifications: string[] (role qualifications)\n                    - availability: Record<string, boolean> (weekly availability)\n                    - preferences: MemberPreferences (role preferences)\n                    - officerRole?: OfficerRole (optional officer position)\n                    - joinedDate: Timestamp (member join date)\n                    - lastActive: Timestamp (last activity timestamp)\n                    \n                    Organization Interface:\n                    - name: string (club name)\n                    - district: string (Toastmasters district)\n                    - clubNumber: string (official club number)\n                    - meetingDay: number (day of week, 0-6)\n                    - meetingTime: string (meeting time)\n                    - timezone: string (club timezone)\n                    - members: Member[] (club members array)\n                    - settings: OrganizationSettings (club-specific settings)\n                    - autoNotificationDay: number (day of month for notifications)\n                    - isActive: boolean (club active status)\n                    \n                    Firebase Collections Structure:\n                    \n                    users/{uid}:\n                    - organization: Organization (club data)\n                    - schedules: Record<string, MonthlySchedule> (monthly schedules)\n                    - preferences: UserPreferences (user settings)\n                    - lastLogin: Timestamp\n                    - createdAt: Timestamp\n                    - notifications: Notification[] (user notifications)\n                    - settings: UserSettings (user-specific settings)\n                    \n                    publicAgendas/{shareId}:\n                    - agenda: WeeklyAgenda (shared agenda data)\n                    - schedule: MonthlySchedule (associated schedule)\n                    - expiresAt: Timestamp (expiration date)\n                    - accessCount: number (view count)\n                    - createdAt: Timestamp\n                    - isActive: boolean (share active status)\n                    - accessLog: AccessLog[] (access tracking)\n                    \n                    publicSchedules/{shareId}:\n                    - schedule: MonthlySchedule (shared schedule data)\n                    - expiresAt: Timestamp (expiration date)\n                    - accessCount: number (view count)\n                    - createdAt: Timestamp\n                    - isActive: boolean (share active status)\n                    - accessLog: AccessLog[] (access tracking)\n                    \n                    organizations/{orgId}/mentorshipPairs/{pairId}:\n                    - id: string (mentorId_menteeId format)\n                    - mentorId: string (Member.id reference)\n                    - menteeId: string (Member.id reference)\n                    - createdAt: serverTimestamp\n                    - active: boolean\n                    - notes: subcollection (mentorship notes)\n                    - lastInteraction: Timestamp (last note or interaction)\n                    - goals: string[] (shared goals)\n                    \n                    MENTORSHIP SYSTEM TECHNICAL DETAILS:\n                    \n                    Service Layer Architecture (mentorshipService.ts):\n                    \n                    pairId(mentorId: string, menteeId: string): string\n                    - Generates unique pair identifiers using underscore separator\n                    - Format: `${mentorId}_${menteeId}`\n                    - Ensures consistent ID generation across the app\n                    - Validates input parameters\n                    - Returns standardized pair identifier\n                    \n                    async upsertPair(orgId: string, mentorId: string, menteeId: string): Promise<string>\n                    - Creates or updates mentorship pairs with server timestamps\n                    - Uses Firestore merge operations for atomic updates\n                    - Returns the generated pair ID\n                    - Error handling for duplicate pairs\n                    - Validates organization and member existence\n                    - Implements transaction safety\n                    \n                    async getAllPairs(orgId: string): Promise<MentorshipPair[]>\n                    - Fetches all mentorship pairs for an organization\n                    - Returns array of MentorshipPair objects\n                    - Includes error handling for network issues\n                    - Implements pagination for large datasets\n                    - Caches results for performance\n                    \n                    notesRef(orgId: string, pairId: string): CollectionReference\n                    - Returns Firestore reference to notes subcollection\n                    - Enables direct access to notes collection\n                    - Used by other service methods\n                    - Validates organization and pair existence\n                    - Returns typed collection reference\n                    \n                    async addNote(orgId: string, pairId: string, note: Omit<MentorshipNote, 'id' | 'createdAt'>): Promise<void>\n                    - Creates new notes with proper typing and validation\n                    - Auto-generates note ID using Firestore doc() method\n                    - Sets serverTimestamp for createdAt field\n                    - Validates note data before saving\n                    - Implements optimistic updates\n                    - Handles concurrent note creation\n                    \n                    watchNotes(orgId: string, pairId: string, onSnapshot: (arr: MentorshipNote[]) => void): Unsubscribe\n                    - Real-time listener for note updates using onSnapshot\n                    - Orders notes by createdAt in descending order\n                    - Returns unsubscribe function for cleanup\n                    - Handles connection errors gracefully\n                    - Implements retry logic for network failures\n                    - Provides offline support with cached data\n                    \n                    React Component Architecture:\n                    \n                    MentorshipManager Component:\n                    - Admin-only pair management with CRUD operations\n                    - State: pairs, loading, error, selectedPair, searchTerm\n                    - Functions: loadPairs, createPair, togglePair, deletePair, searchPairs\n                    - UI: Table view with member names, status toggles, statistics\n                    - Props: organization, currentUser, isAdmin\n                    - Performance: useCallback for event handlers, useMemo for filtered data\n                    - Error handling: Try-catch blocks, user-friendly error messages\n                    - Accessibility: ARIA labels, keyboard navigation\n                    \n                    MentorshipNotes Component:\n                    - Modal/drawer with real-time note display and creation\n                    - State: notes, loading, error, isOpen, newNote, filterType\n                    - Functions: loadNotes, addNote, updateNote, deleteNote, filterNotes\n                    - UI: Note list, creation form, filtering, search, pagination\n                    - Props: pairId, mentorId, menteeId, isOpen, onClose\n                    - Performance: Virtual scrolling for large note lists\n                    - Real-time: Firestore listeners with proper cleanup\n                    - Validation: Form validation with real-time feedback\n                    \n                    MentorshipPanel Component:\n                    - Member profile integration with quick access\n                    - State: pairs, loading, error, showNotes, selectedPair\n                    - Functions: loadPairs, openNotes, closeNotes, selectPair\n                    - UI: Relationship display, quick actions, note access\n                    - Props: memberId, memberName, currentUser\n                    - Performance: Lazy loading for note modals\n                    - Responsive: Mobile-first design with breakpoints\n                    \n                    RoleAssignmentCell Integration:\n                    - Schedule integration with mentorship icons\n                    - State: mentorshipPairs, isAdmin, hoveredMember\n                    - Functions: canSeeMentorshipInfo, isMentee, handleHover\n                    - UI: Mentorship icon (📝) next to mentee names\n                    - Props: assignedMemberId, currentUser, organization\n                    - Performance: Memoized calculations for visibility\n                    - Accessibility: Tooltips and screen reader support\n                    \n                    State Management Patterns:\n                    \n                    Local Component State (useState):\n                    - Forms: input values, validation states, error messages\n                    - Modals: open/closed states, loading indicators, selected items\n                    - UI: expanded/collapsed states, hover states, focus states\n                    - Data: fetched data, error states, loading states, pagination\n                    - Filters: search terms, sort options, view preferences\n                    \n                    Performance Optimization (useCallback):\n                    - Event handlers to prevent re-renders\n                    - Expensive calculations with dependencies\n                    - API calls with parameter dependencies\n                    - Form submission handlers\n                    - Navigation and routing handlers\n                    - Debounced search functions\n                    \n                    Side Effects (useEffect):\n                    - Firestore listeners with proper cleanup\n                    - Data fetching on component mount\n                    - Dependency-based re-fetching\n                    - Cleanup functions for subscriptions\n                    - Window event listeners\n                    - Timer and interval management\n                    \n                    Global State (ToastmastersContext):\n                    - Organization data with real-time updates\n                    - Current user information and permissions\n                    - Schedule data with caching\n                    - Member data with relationships\n                    - Notification state management\n                    - Theme and preference settings\n                    \n                    Permission System Integration:\n                    \n                    isAdmin() Function:\n                    - Checks user role in organization\n                    - Returns boolean for admin status\n                    - Used for conditional rendering\n                    - Validates admin operations\n                    - Implements role hierarchy\n                    - Caches admin status for performance\n                    \n                    isAuthenticated() Function:\n                    - Checks Firebase Auth status\n                    - Returns boolean for auth state\n                    - Used for route protection\n                    - Validates user sessions\n                    - Handles token refresh\n                    - Implements session persistence\n                    \n                    Role-based Visibility:\n                    - Notes filtered by user relationships\n                    - Mentor can see mentee notes\n                    - Mentee can see shared notes\n                    - Officers can see officer-level notes\n                    - Admins can see all notes\n                    - Implements granular permissions\n                    - Caches permission calculations\n                    \n                    Firestore Security Rules:\n                    - Data access control at database level\n                    - User authentication validation\n                    - Role-based permissions\n                    - Organization isolation\n                    - Field-level security\n                    - Audit logging for security events\n                    \n                    Real-time Data Patterns:\n                    \n                    Firestore onSnapshot Implementation:\n                    - Live updates for note changes\n                    - Automatic re-rendering on data changes\n                    - Optimistic updates for better UX\n                    - Conflict resolution for concurrent edits\n                    - Implements change detection\n                    - Handles large dataset updates\n                    \n                    Proper Cleanup with useEffect:\n                    - Return unsubscribe functions\n                    - Prevent memory leaks\n                    - Handle component unmounting\n                    - Clean up event listeners\n                    - Cancel pending requests\n                    - Clear timers and intervals\n                    \n                    Error Handling for Connection Issues:\n                    - Network error detection\n                    - Retry mechanisms with exponential backoff\n                    - Offline state handling\n                    - User-friendly error messages\n                    - Graceful degradation\n                    - Recovery suggestions\n                    \n                    Optimistic Updates:\n                    - Immediate UI updates\n                    - Background data persistence\n                    - Rollback on failure\n                    - Better perceived performance\n                    - Conflict resolution\n                    - User feedback during operations\n                    \n                    UI/UX Technical Implementation:\n                    \n                    Tailwind CSS Styling:\n                    - Utility-first approach\n                    - Consistent design system\n                    - Responsive breakpoints (sm, md, lg, xl)\n                    - Dark mode support with dark: classes\n                    - Custom color schemes\n                    - Animation and transition utilities\n                    \n                    Mobile-responsive Design:\n                    - sm: breakpoints for mobile/desktop\n                    - Stacked layouts on mobile\n                    - Horizontal layouts on desktop\n                    - Touch-friendly interactions\n                    - Swipe gestures for mobile\n                    - Responsive typography\n                    \n                    Dark Mode Support:\n                    - dark: classes for dark theme\n                    - Automatic theme detection\n                    - User preference persistence\n                    - Consistent color schemes\n                    - High contrast mode support\n                    - Theme transition animations\n                    \n                    Accessibility Features:\n                    - ARIA labels for screen readers\n                    - Keyboard navigation support\n                    - Focus management\n                    - Color contrast compliance\n                    - Screen reader announcements\n                    - Voice navigation support\n                    \n                    Loading States and Error Boundaries:\n                    - Skeleton loaders\n                    - Error fallback components\n                    - Retry mechanisms\n                    - User feedback systems\n                    - Progressive loading\n                    - Error recovery flows\n                    \n                    Performance Optimizations:\n                    \n                    useCallback for Event Handlers:\n                    - Prevents unnecessary re-renders\n                    - Memoizes function references\n                    - Optimizes child component updates\n                    - Reduces render cycles\n                    - Implements dependency arrays\n                    - Handles closure dependencies\n                    \n                    Memoized Calculations (useMemo):\n                    - Expensive computations\n                    - Derived state calculations\n                    - Filtered data processing\n                    - Dependency-based memoization\n                    - Caches complex calculations\n                    - Optimizes re-render performance\n                    \n                    Efficient Firestore Queries:\n                    - Proper indexing for queries\n                    - Limit results with pagination\n                    - Use specific field selections\n                    - Optimize query patterns\n                    - Implement query caching\n                    - Use compound indexes\n                    \n                    Lazy Loading for Modal Components:\n                    - Code splitting for modals\n                    - Dynamic imports\n                    - Reduced initial bundle size\n                    - Faster page loads\n                    - Progressive enhancement\n                    - Route-based code splitting\n                    \n                    Error Handling Patterns:\n                    \n                    Try-catch Blocks for Async Operations:\n                    - Firestore operations\n                    - API calls\n                    - File uploads\n                    - Network requests\n                    - User input validation\n                    - External service calls\n                    \n                    User-friendly Error Messages:\n                    - Clear error descriptions\n                    - Actionable error guidance\n                    - Context-specific messages\n                    - Recovery suggestions\n                    - Localized error messages\n                    - Error severity levels\n                    \n                    Graceful Degradation for Network Issues:\n                    - Offline state handling\n                    - Cached data fallbacks\n                    - Retry mechanisms\n                    - Progressive enhancement\n                    - Service worker support\n                    - Background sync\n                    \n                    Validation for Form Inputs:\n                    - Client-side validation\n                    - Real-time feedback\n                    - Error state management\n                    - Accessibility compliance\n                    - Custom validation rules\n                    - Cross-field validation\n                    \n                    Integration Points:\n                    \n                    ProfilePage Integration:\n                    - Mentorship panels in member profiles\n                    - Admin mentorship management section\n                    - Officer role functionality\n                    - Member relationship display\n                    - Quick access to mentorship features\n                    - Responsive layout adaptation\n                    \n                    MemberManager Integration:\n                    - Mentorship column in member tables\n                    - Desktop and mobile responsive layouts\n                    - Quick access to mentorship notes\n                    - Member relationship indicators\n                    - Bulk operations for mentorship\n                    - Export functionality\n                    \n                    ScheduleView Integration:\n                    - Mentorship icons in role assignments\n                    - Visual indicators for mentees\n                    - Admin and mentor visibility controls\n                    - Role assignment context\n                    - Mentorship-aware role suggestions\n                    - Integration with availability system\n                    \n                    Firestore Rules Integration:\n                    - Security for mentorship data access\n                    - Role-based permissions\n                    - Organization data isolation\n                    - User authentication validation\n                    - Field-level security\n                    - Audit trail implementation\n                    ",
      "entities": [
        "Detailed Technical Implementation",
        "React Architecture",
        "TypeScript Interfaces",
        "Firebase Collections",
        "Service Layer",
        "Component Architecture",
        "State Management",
        "Performance Optimization",
        "Error Handling",
        "UI/UX Implementation",
        "Permission System",
        "Real-time Data",
        "Accessibility",
        "Mobile Responsive",
        "Security Rules",
        "Integration Points"
      ],
      "category": "technical",
      "created": "2025-01-27T12:30:00.000000"
    }
  ]
}